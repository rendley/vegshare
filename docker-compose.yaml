# Версия синтаксиса docker-compose.
version: '3.8'

# В этом разделе мы определяем все сервисы (контейнеры),
# которые необходимы для работы нашего приложения.
services:
  # Сервис базы данных PostgreSQL.
  # Здесь будут храниться данные о пользователях, фермах, участках.
  postgres:
    image: postgres:16 # Используем официальный образ PostgreSQL 16-й версии.
    environment: # Переменные окружения для настройки контейнера.
      POSTGRES_USER: vegshare # Имя пользователя для подключения к БД.
      POSTGRES_PASSWORD: vegshare # Пароль для подключения к БД.
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256 # Метод аутентификации.
    ports:
      # "Пробрасываем" порт 5432 из контейнера на порт 5432 нашего компьютера,
      # чтобы мы могли подключаться к БД инструментами вроде DBeaver.
      - "5432:5432"
    volumes:
      # Связываем данные PostgreSQL с именованным томом 'pg_data',
      # чтобы при перезапуске контейнера наши данные не терялись.
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped # Автоматически перезапускать контейнер, если он остановился.

  # Сервис Redis. Это быстрая база данных в памяти.
  # Может использоваться для кэширования, хранения сессий и т.д.
  redis:
    image: redis:7.2
    ports:
      - "6379:6379" # Стандартный порт Redis.
    restart: unless-stopped

  # НАШ НОВЫЙ СЕРВИС
  # Сервис RabbitMQ - брокер сообщений.
  # Он будет действовать как почтовое отделение для асинхронных задач.
  rabbitmq:
    image: rabbitmq:3-management # Используем образ с плагином для веб-интерфейса.
    hostname: rabbitmq # Устанавливаем сетевое имя, чтобы другие контейнеры могли к нему обращаться.
    environment:
      # Устанавливаем логин и пароль по умолчанию для доступа.
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      # Порт 5672 используется для подключения приложений к RabbitMQ (протокол AMQP).
      - "5672:5672"
      # Порт 15672 - это веб-интерфейс для управления и мониторинга.
      # Вы сможете открыть в браузере http://localhost:15672
      - "15672:15672"
    restart: unless-stopped

  # Сервис MediaMTX - медиа-сервер.
  # Его задача - принимать видеопотоки с камер (по RTSP) и раздавать их
  # пользователям в браузер (по WebRTC).
  mediamtx:
    image: bluenviron/mediamtx:latest
    container_name: mediamtx
    ports:
      - "8554:8554"      # RTSP
      - "8888:8888"      # HLS (HTTP)
      - "8889:8889"      # WebRTC (WebSocket)
      - "1935:1935"      # RTMP
      - "8189:8189/udp"  # WebRTC (UDP)
      - "9997:9997"      # API
    volumes:
      - ./mediamtx.yml:/mediamtx.yml
    environment:
      - MTX_CONF_PATH=/mediamtx.yml
    restart: unless-stopped

# Здесь мы определяем тома (volumes) для хранения данных.
volumes:
  pg_data: # Именованный том для данных PostgreSQL.

